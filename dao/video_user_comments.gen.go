// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"main/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newVideoUserComment(db *gorm.DB, opts ...gen.DOOption) videoUserComment {
	_videoUserComment := videoUserComment{}

	_videoUserComment.videoUserCommentDo.UseDB(db, opts...)
	_videoUserComment.videoUserCommentDo.UseModel(&models.VideoUserComment{})

	tableName := _videoUserComment.videoUserCommentDo.TableName()
	_videoUserComment.ALL = field.NewAsterisk(tableName)
	_videoUserComment.VideoID = field.NewUint(tableName, "video_id")
	_videoUserComment.UserID = field.NewUint(tableName, "user_id")
	_videoUserComment.CommentID = field.NewUint(tableName, "comment_id")
	_videoUserComment.Video = videoUserCommentBelongsToVideo{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Video", "models.Video"),
	}

	_videoUserComment.User = videoUserCommentBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "models.User"),
	}

	_videoUserComment.Comment = videoUserCommentBelongsToComment{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Comment", "models.Comment"),
	}

	_videoUserComment.fillFieldMap()

	return _videoUserComment
}

type videoUserComment struct {
	videoUserCommentDo

	ALL       field.Asterisk
	VideoID   field.Uint
	UserID    field.Uint
	CommentID field.Uint
	Video     videoUserCommentBelongsToVideo

	User videoUserCommentBelongsToUser

	Comment videoUserCommentBelongsToComment

	fieldMap map[string]field.Expr
}

func (v videoUserComment) Table(newTableName string) *videoUserComment {
	v.videoUserCommentDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v videoUserComment) As(alias string) *videoUserComment {
	v.videoUserCommentDo.DO = *(v.videoUserCommentDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *videoUserComment) updateTableName(table string) *videoUserComment {
	v.ALL = field.NewAsterisk(table)
	v.VideoID = field.NewUint(table, "video_id")
	v.UserID = field.NewUint(table, "user_id")
	v.CommentID = field.NewUint(table, "comment_id")

	v.fillFieldMap()

	return v
}

func (v *videoUserComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *videoUserComment) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 6)
	v.fieldMap["video_id"] = v.VideoID
	v.fieldMap["user_id"] = v.UserID
	v.fieldMap["comment_id"] = v.CommentID

}

func (v videoUserComment) clone(db *gorm.DB) videoUserComment {
	v.videoUserCommentDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v videoUserComment) replaceDB(db *gorm.DB) videoUserComment {
	v.videoUserCommentDo.ReplaceDB(db)
	return v
}

type videoUserCommentBelongsToVideo struct {
	db *gorm.DB

	field.RelationField
}

func (a videoUserCommentBelongsToVideo) Where(conds ...field.Expr) *videoUserCommentBelongsToVideo {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a videoUserCommentBelongsToVideo) WithContext(ctx context.Context) *videoUserCommentBelongsToVideo {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a videoUserCommentBelongsToVideo) Session(session *gorm.Session) *videoUserCommentBelongsToVideo {
	a.db = a.db.Session(session)
	return &a
}

func (a videoUserCommentBelongsToVideo) Model(m *models.VideoUserComment) *videoUserCommentBelongsToVideoTx {
	return &videoUserCommentBelongsToVideoTx{a.db.Model(m).Association(a.Name())}
}

type videoUserCommentBelongsToVideoTx struct{ tx *gorm.Association }

func (a videoUserCommentBelongsToVideoTx) Find() (result *models.Video, err error) {
	return result, a.tx.Find(&result)
}

func (a videoUserCommentBelongsToVideoTx) Append(values ...*models.Video) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a videoUserCommentBelongsToVideoTx) Replace(values ...*models.Video) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a videoUserCommentBelongsToVideoTx) Delete(values ...*models.Video) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a videoUserCommentBelongsToVideoTx) Clear() error {
	return a.tx.Clear()
}

func (a videoUserCommentBelongsToVideoTx) Count() int64 {
	return a.tx.Count()
}

type videoUserCommentBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a videoUserCommentBelongsToUser) Where(conds ...field.Expr) *videoUserCommentBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a videoUserCommentBelongsToUser) WithContext(ctx context.Context) *videoUserCommentBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a videoUserCommentBelongsToUser) Session(session *gorm.Session) *videoUserCommentBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a videoUserCommentBelongsToUser) Model(m *models.VideoUserComment) *videoUserCommentBelongsToUserTx {
	return &videoUserCommentBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type videoUserCommentBelongsToUserTx struct{ tx *gorm.Association }

func (a videoUserCommentBelongsToUserTx) Find() (result *models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a videoUserCommentBelongsToUserTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a videoUserCommentBelongsToUserTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a videoUserCommentBelongsToUserTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a videoUserCommentBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a videoUserCommentBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type videoUserCommentBelongsToComment struct {
	db *gorm.DB

	field.RelationField
}

func (a videoUserCommentBelongsToComment) Where(conds ...field.Expr) *videoUserCommentBelongsToComment {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a videoUserCommentBelongsToComment) WithContext(ctx context.Context) *videoUserCommentBelongsToComment {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a videoUserCommentBelongsToComment) Session(session *gorm.Session) *videoUserCommentBelongsToComment {
	a.db = a.db.Session(session)
	return &a
}

func (a videoUserCommentBelongsToComment) Model(m *models.VideoUserComment) *videoUserCommentBelongsToCommentTx {
	return &videoUserCommentBelongsToCommentTx{a.db.Model(m).Association(a.Name())}
}

type videoUserCommentBelongsToCommentTx struct{ tx *gorm.Association }

func (a videoUserCommentBelongsToCommentTx) Find() (result *models.Comment, err error) {
	return result, a.tx.Find(&result)
}

func (a videoUserCommentBelongsToCommentTx) Append(values ...*models.Comment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a videoUserCommentBelongsToCommentTx) Replace(values ...*models.Comment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a videoUserCommentBelongsToCommentTx) Delete(values ...*models.Comment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a videoUserCommentBelongsToCommentTx) Clear() error {
	return a.tx.Clear()
}

func (a videoUserCommentBelongsToCommentTx) Count() int64 {
	return a.tx.Count()
}

type videoUserCommentDo struct{ gen.DO }

type IVideoUserCommentDo interface {
	gen.SubQuery
	Debug() IVideoUserCommentDo
	WithContext(ctx context.Context) IVideoUserCommentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVideoUserCommentDo
	WriteDB() IVideoUserCommentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVideoUserCommentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVideoUserCommentDo
	Not(conds ...gen.Condition) IVideoUserCommentDo
	Or(conds ...gen.Condition) IVideoUserCommentDo
	Select(conds ...field.Expr) IVideoUserCommentDo
	Where(conds ...gen.Condition) IVideoUserCommentDo
	Order(conds ...field.Expr) IVideoUserCommentDo
	Distinct(cols ...field.Expr) IVideoUserCommentDo
	Omit(cols ...field.Expr) IVideoUserCommentDo
	Join(table schema.Tabler, on ...field.Expr) IVideoUserCommentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVideoUserCommentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVideoUserCommentDo
	Group(cols ...field.Expr) IVideoUserCommentDo
	Having(conds ...gen.Condition) IVideoUserCommentDo
	Limit(limit int) IVideoUserCommentDo
	Offset(offset int) IVideoUserCommentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoUserCommentDo
	Unscoped() IVideoUserCommentDo
	Create(values ...*models.VideoUserComment) error
	CreateInBatches(values []*models.VideoUserComment, batchSize int) error
	Save(values ...*models.VideoUserComment) error
	First() (*models.VideoUserComment, error)
	Take() (*models.VideoUserComment, error)
	Last() (*models.VideoUserComment, error)
	Find() ([]*models.VideoUserComment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.VideoUserComment, err error)
	FindInBatches(result *[]*models.VideoUserComment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.VideoUserComment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVideoUserCommentDo
	Assign(attrs ...field.AssignExpr) IVideoUserCommentDo
	Joins(fields ...field.RelationField) IVideoUserCommentDo
	Preload(fields ...field.RelationField) IVideoUserCommentDo
	FirstOrInit() (*models.VideoUserComment, error)
	FirstOrCreate() (*models.VideoUserComment, error)
	FindByPage(offset int, limit int) (result []*models.VideoUserComment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVideoUserCommentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v videoUserCommentDo) Debug() IVideoUserCommentDo {
	return v.withDO(v.DO.Debug())
}

func (v videoUserCommentDo) WithContext(ctx context.Context) IVideoUserCommentDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v videoUserCommentDo) ReadDB() IVideoUserCommentDo {
	return v.Clauses(dbresolver.Read)
}

func (v videoUserCommentDo) WriteDB() IVideoUserCommentDo {
	return v.Clauses(dbresolver.Write)
}

func (v videoUserCommentDo) Session(config *gorm.Session) IVideoUserCommentDo {
	return v.withDO(v.DO.Session(config))
}

func (v videoUserCommentDo) Clauses(conds ...clause.Expression) IVideoUserCommentDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v videoUserCommentDo) Returning(value interface{}, columns ...string) IVideoUserCommentDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v videoUserCommentDo) Not(conds ...gen.Condition) IVideoUserCommentDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v videoUserCommentDo) Or(conds ...gen.Condition) IVideoUserCommentDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v videoUserCommentDo) Select(conds ...field.Expr) IVideoUserCommentDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v videoUserCommentDo) Where(conds ...gen.Condition) IVideoUserCommentDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v videoUserCommentDo) Order(conds ...field.Expr) IVideoUserCommentDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v videoUserCommentDo) Distinct(cols ...field.Expr) IVideoUserCommentDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v videoUserCommentDo) Omit(cols ...field.Expr) IVideoUserCommentDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v videoUserCommentDo) Join(table schema.Tabler, on ...field.Expr) IVideoUserCommentDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v videoUserCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVideoUserCommentDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v videoUserCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) IVideoUserCommentDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v videoUserCommentDo) Group(cols ...field.Expr) IVideoUserCommentDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v videoUserCommentDo) Having(conds ...gen.Condition) IVideoUserCommentDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v videoUserCommentDo) Limit(limit int) IVideoUserCommentDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v videoUserCommentDo) Offset(offset int) IVideoUserCommentDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v videoUserCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoUserCommentDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v videoUserCommentDo) Unscoped() IVideoUserCommentDo {
	return v.withDO(v.DO.Unscoped())
}

func (v videoUserCommentDo) Create(values ...*models.VideoUserComment) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v videoUserCommentDo) CreateInBatches(values []*models.VideoUserComment, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v videoUserCommentDo) Save(values ...*models.VideoUserComment) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v videoUserCommentDo) First() (*models.VideoUserComment, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.VideoUserComment), nil
	}
}

func (v videoUserCommentDo) Take() (*models.VideoUserComment, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.VideoUserComment), nil
	}
}

func (v videoUserCommentDo) Last() (*models.VideoUserComment, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.VideoUserComment), nil
	}
}

func (v videoUserCommentDo) Find() ([]*models.VideoUserComment, error) {
	result, err := v.DO.Find()
	return result.([]*models.VideoUserComment), err
}

func (v videoUserCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.VideoUserComment, err error) {
	buf := make([]*models.VideoUserComment, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v videoUserCommentDo) FindInBatches(result *[]*models.VideoUserComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v videoUserCommentDo) Attrs(attrs ...field.AssignExpr) IVideoUserCommentDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v videoUserCommentDo) Assign(attrs ...field.AssignExpr) IVideoUserCommentDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v videoUserCommentDo) Joins(fields ...field.RelationField) IVideoUserCommentDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v videoUserCommentDo) Preload(fields ...field.RelationField) IVideoUserCommentDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v videoUserCommentDo) FirstOrInit() (*models.VideoUserComment, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.VideoUserComment), nil
	}
}

func (v videoUserCommentDo) FirstOrCreate() (*models.VideoUserComment, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.VideoUserComment), nil
	}
}

func (v videoUserCommentDo) FindByPage(offset int, limit int) (result []*models.VideoUserComment, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v videoUserCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v videoUserCommentDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v videoUserCommentDo) Delete(models ...*models.VideoUserComment) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *videoUserCommentDo) withDO(do gen.Dao) *videoUserCommentDo {
	v.DO = *do.(*gen.DO)
	return v
}
